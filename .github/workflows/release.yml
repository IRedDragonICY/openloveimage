name: 🚀 Auto Release & Multi-Platform Build

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Job untuk generate version dan changelog
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      should-release: ${{ steps.version.outputs.should-release }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Generate version and check if release needed
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"
          
          # Remove 'v' prefix if exists
          LAST_VERSION=${LAST_TAG#v}
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$LAST_VERSION" ]; then
            NEW_TAG="v$CURRENT_VERSION"
            echo "New release needed: $NEW_TAG"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            # Auto increment patch version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            NEW_TAG="v$NEW_VERSION"
            
            echo "Auto incrementing version to: $NEW_VERSION"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "should-release=true" >> $GITHUB_OUTPUT
            
            # Update package.json
            npm version $NEW_VERSION --no-git-tag-version
            
            # Update tauri.conf.json
            sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" src-tauri/tauri.conf.json
            
            # Commit version bump
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add package.json src-tauri/tauri.conf.json
            git commit -m "🔖 Bump version to $NEW_VERSION [skip ci]"
            git push
          fi

      - name: 📝 Generate Changelog
        id: changelog
        if: steps.version.outputs.should-release == 'true'
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # First release, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Generate changelog with modern formatting
          CHANGELOG="## 🎉 What's New in v${{ steps.version.outputs.version }}

          ### ✨ Features & Improvements
          $COMMITS

          ### 🔧 Technical Details
          - **Platform Support**: Windows, macOS, Linux
          - **Architecture**: x64, Universal (macOS)
          - **Built with**: Tauri v2, Next.js 15, React 19
          - **Security**: All processing done locally, no data leaves your device

          ### 📦 Download Options
          Choose the appropriate file for your operating system:
          - **Windows**: \`.msi\` (installer) or \`.exe\` (portable)
          - **macOS**: \`.dmg\` (Universal - Intel & Apple Silicon)
          - **Linux**: \`.AppImage\` (portable) or \`.deb\` (Ubuntu/Debian)

          ### 🚀 Installation
          1. Download the appropriate file for your OS
          2. Run the installer or extract the portable version
          3. Enjoy converting your images with privacy and speed!

          ---
          *Built with ❤️ using Tauri & Next.js*"
          
          # Escape newlines for GitHub output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

  # Build untuk Windows
  build-windows:
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    runs-on: windows-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build Tauri app for Windows
        run: npm run tauri build -- --target x86_64-pc-windows-msvc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: |
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe

  # Build untuk macOS
  build-macos:
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    runs-on: macos-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build Tauri app for macOS (Universal)
        run: npm run tauri build -- --target universal-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app

  # Build untuk Linux
  build-linux:
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build Tauri app for Linux
        run: npm run tauri build -- --target x86_64-unknown-linux-gnu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: |
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb

  # Create Release
  create-release:
    needs: [prepare-release, build-windows, build-macos, build-linux]
    if: needs.prepare-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./artifacts

      - name: 🏷️ Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ needs.prepare-release.outputs.tag }}
          git push origin ${{ needs.prepare-release.outputs.tag }}

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: "OpenLoveImage v${{ needs.prepare-release.outputs.version }} 🎨"
          body: ${{ needs.prepare-release.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎊 Success Notification
        run: |
          echo "🎉 Release v${{ needs.prepare-release.outputs.version }} created successfully!"
          echo "📦 Artifacts uploaded for Windows, macOS, and Linux"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}" 