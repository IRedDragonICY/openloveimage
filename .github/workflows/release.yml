name: 'Release OpenLoveImage Desktop'

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}-${context.sha.substring(0, 7)}`,
              name: `OpenLoveImage Desktop v${process.env.PACKAGE_VERSION}`,
              body: `
            ## 🎉 OpenLoveImage Desktop Release
            
            ### 📦 Downloads
            - **Windows**: Download the \`.msi\` or \`.exe\` installer
            - **Linux**: Download the \`.AppImage\` or \`.deb\` package
            - **Portable**: Download the ZIP files for portable versions
            
            ### ✨ Features
            - 🖼️ Convert HEIC, JPG, PNG, WebP, GIF, BMP, TIFF, SVG
            - 🎛️ Advanced conversion options and quality settings
            - 📁 Batch processing with drag & drop
            - 🔒 Privacy-first: All processing happens locally
            - ⚡ Native desktop performance
            
            ### 🔧 Installation
            - **Windows**: Run the installer (\`.msi\` or \`.exe\`)
            - **Linux**: Install the \`.deb\` package or use \`.AppImage\`
            - **Portable**: Extract ZIP and run the executable
            
            Built from commit: ${context.sha}
              `,
              draft: false,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev libayatana-appindicator3-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  create-portable-versions:
    needs: [create-release, build-tauri]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            os: 'linux'
            ext: ''
          - platform: 'windows-latest'
            os: 'windows'
            ext: '.exe'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev libayatana-appindicator3-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        run: npm run tauri:build

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        shell: bash

      - name: Create portable ZIP (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          mkdir portable-windows
          copy "src-tauri\target\release\app.exe" "portable-windows\OpenLoveImage.exe"
          echo "# OpenLoveImage Portable" > portable-windows\README.txt
          echo "## How to use:" >> portable-windows\README.txt
          echo "1. Double-click OpenLoveImage.exe to run" >> portable-windows\README.txt
          echo "2. No installation required!" >> portable-windows\README.txt
          echo "3. Drag and drop images to convert" >> portable-windows\README.txt
          echo "" >> portable-windows\README.txt
          echo "Version: $env:PACKAGE_VERSION" >> portable-windows\README.txt
          echo "Platform: Windows x64 Portable" >> portable-windows\README.txt
          powershell Compress-Archive -Path "portable-windows\*" -DestinationPath "OpenLoveImage-$env:PACKAGE_VERSION-windows-x64-portable.zip"

      - name: Create portable ZIP (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          mkdir portable-linux
          cp src-tauri/target/release/app portable-linux/OpenLoveImage
          chmod +x portable-linux/OpenLoveImage
          cat > portable-linux/README.txt << EOF
          # OpenLoveImage Portable
          ## How to use:
          1. Make sure the file is executable: chmod +x OpenLoveImage
          2. Run: ./OpenLoveImage
          3. No installation required!
          4. Drag and drop images to convert
          
          Version: $PACKAGE_VERSION
          Platform: Linux x64 Portable
          EOF
          cat > portable-linux/install.sh << EOF
          #!/bin/bash
          echo "Setting up OpenLoveImage..."
          chmod +x OpenLoveImage
          echo "Done! You can now run: ./OpenLoveImage"
          EOF
          chmod +x portable-linux/install.sh
          zip -r "OpenLoveImage-$PACKAGE_VERSION-linux-x64-portable.zip" portable-linux/

      - name: Upload portable ZIP to release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const platform = '${{ matrix.os }}';
            const version = process.env.PACKAGE_VERSION;
            const filename = `OpenLoveImage-${version}-${platform}-x64-portable.zip`;
            
            if (fs.existsSync(filename)) {
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: '${{ needs.create-release.outputs.release_id }}',
                name: filename,
                data: fs.readFileSync(filename)
              });
            }

  update-release:
    needs: [create-release, build-tauri, create-portable-versions]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Update release with final information
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ needs.create-release.outputs.release_id }}',
              body: `
            ## 🎉 OpenLoveImage Desktop v${process.env.PACKAGE_VERSION}
            
            **Modern image converter with before/after preview - Now available as a native desktop application!**
            
            ### 📦 Download Options
            
            #### Windows (Recommended)
            - **🔧 MSI Installer** - Professional Windows installer with uninstaller
            - **⚡ NSIS Setup** - Lightweight setup executable
            - **📁 Portable ZIP** - No installation required, extract and run
            
            #### Linux (Multiple Formats)
            - **🖥️ AppImage** - Universal Linux application (recommended)
            - **📦 DEB Package** - For Debian/Ubuntu systems
            - **📁 Portable ZIP** - No installation required, extract and run
            
            #### macOS
            - **🍎 DMG Package** - Standard macOS application installer
            
            ### ✨ Features
            - **🖼️ Multiple Formats**: Convert HEIC, JPG, PNG, WebP, GIF, BMP, TIFF, SVG
            - **🎛️ Advanced Options**: Quality settings, compression levels, resize options
            - **📁 Batch Processing**: Drag & drop multiple files
            - **🔒 Privacy First**: All processing happens locally, no cloud uploads
            - **⚡ Native Performance**: Faster than browser-based solutions
            - **🎨 Modern UI**: Beautiful Material Design interface
            - **🔄 Before/After Preview**: Compare original vs converted images
            
            ### 🚀 Quick Start
            
            **Windows:**
            1. Download the MSI installer or portable ZIP
            2. Install or extract and run OpenLoveImage.exe
            3. Drag and drop your images to convert!
            
            **Linux:**
            1. Download AppImage or DEB package
            2. For AppImage: \`chmod +x\` and run directly
            3. For DEB: \`sudo dpkg -i package.deb\`
            4. Or use portable ZIP for no-install option
            
            **macOS:**
            1. Download DMG file
            2. Open and drag to Applications folder
            3. Launch OpenLoveImage from Applications
            
            ### 🛠️ Technical Details
            - **Frontend**: Next.js 15 + TypeScript + Material-UI
            - **Backend**: Tauri 2.0 (Rust-based)
            - **Platforms**: Windows, Linux, macOS
            - **Architecture**: x64 (Intel/AMD)
            - **Size**: ~20-30MB installed
            
            ### 🔧 Development
            Built from commit: ${context.sha}
            Node.js: Latest LTS
            Tauri: 2.0+
            
            ### 📝 Changelog
            - Native desktop application with Tauri
            - Cross-platform support (Windows, Linux, macOS)
            - Improved performance vs web version
            - Enhanced file system integration
            - Portable versions available
            
            ---
            **💝 Free and Open Source** - Made with ❤️ for the community
              `
            }); 