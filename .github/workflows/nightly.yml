name: 🌙 Nightly Build

on:
  schedule:
    # Run setiap hari jam 2 pagi UTC (9 pagi WIB)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a nightly release'
        required: false
        default: 'true'
        type: boolean
      build_platforms:
        description: 'Platforms to build (comma-separated: windows,linux,macos)'
        required: false
        default: 'windows,linux,macos'
        type: string

permissions:
  contents: write
  actions: write
  packages: write
  deployments: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check if there are new commits since last nightly
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      commit-count: ${{ steps.check.outputs.commit-count }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check for changes since last nightly
        id: check
        run: |
          # Get last nightly tag
          LAST_NIGHTLY=$(git tag -l "nightly-*" | sort -V | tail -1)
          
          if [ -z "$LAST_NIGHTLY" ]; then
            echo "No previous nightly found, building..."
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "commit-count=first-nightly" >> $GITHUB_OUTPUT
          else
            # Count commits since last nightly
            COMMIT_COUNT=$(git rev-list --count ${LAST_NIGHTLY}..HEAD)
            echo "Commits since last nightly: $COMMIT_COUNT"
            
            if [ "$COMMIT_COUNT" -gt 0 ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "commit-count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
            else
              echo "should-build=false" >> $GITHUB_OUTPUT
              echo "commit-count=0" >> $GITHUB_OUTPUT
            fi
          fi

  # Build untuk Windows (nightly)
  build-windows-nightly:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true' && (contains(github.event.inputs.build_platforms, 'windows') || github.event.inputs.build_platforms == '' || github.event_name == 'schedule')
    runs-on: windows-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔧 Update version for nightly
        run: |
          $currentVersion = (Get-Content package.json | ConvertFrom-Json).version
          $nightlyVersion = "$currentVersion-nightly.${{ github.run_number }}"
          
          # Update package.json
          $packageJson = Get-Content package.json | ConvertFrom-Json
          $packageJson.version = $nightlyVersion
          $packageJson | ConvertTo-Json -Depth 100 | Set-Content package.json
          
          # Update tauri.conf.json
          $tauriConf = Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json
          $tauriConf.version = $nightlyVersion
          $tauriConf | ConvertTo-Json -Depth 100 | Set-Content src-tauri/tauri.conf.json
          
          echo "NIGHTLY_VERSION=$nightlyVersion" >> $env:GITHUB_ENV

      - name: 🏗️ Build Tauri app for Windows
        run: npm run tauri build -- --target x86_64-pc-windows-msvc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload Windows nightly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64-nightly
          path: |
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe

  # Build untuk macOS (nightly)
  build-macos-nightly:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true' && (contains(github.event.inputs.build_platforms, 'macos') || github.event.inputs.build_platforms == '' || github.event_name == 'schedule')
    runs-on: macos-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔧 Update version for nightly
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NIGHTLY_VERSION="$CURRENT_VERSION-nightly.${{ github.run_number }}"
          
          # Update package.json
          npm version $NIGHTLY_VERSION --no-git-tag-version
          
          # Update tauri.conf.json
          sed -i '' "s/\"version\": \".*\"/\"version\": \"$NIGHTLY_VERSION\"/" src-tauri/tauri.conf.json
          
          echo "NIGHTLY_VERSION=$NIGHTLY_VERSION" >> $GITHUB_ENV

      - name: 🏗️ Build Tauri app for macOS (Universal)
        run: npm run tauri build -- --target universal-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload macOS nightly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-nightly
          path: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app

  # Build untuk Linux (nightly)
  build-linux-nightly:
    needs: check-changes
    if: needs.check-changes.outputs.should-build == 'true' && (contains(github.event.inputs.build_platforms, 'linux') || github.event.inputs.build_platforms == '' || github.event_name == 'schedule')
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔧 Update version for nightly
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NIGHTLY_VERSION="$CURRENT_VERSION-nightly.${{ github.run_number }}"
          
          # Update package.json
          npm version $NIGHTLY_VERSION --no-git-tag-version
          
          # Update tauri.conf.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$NIGHTLY_VERSION\"/" src-tauri/tauri.conf.json
          
          echo "NIGHTLY_VERSION=$NIGHTLY_VERSION" >> $GITHUB_ENV

      - name: 🏗️ Build Tauri app for Linux
        run: npm run tauri build -- --target x86_64-unknown-linux-gnu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Upload Linux nightly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-nightly
          path: |
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb

  # Create Nightly Release
  create-nightly-release:
    needs: [check-changes, build-windows-nightly, build-macos-nightly, build-linux-nightly]
    if: |
      always() &&
      needs.check-changes.outputs.should-build == 'true' &&
      (github.event.inputs.create_release == 'true' || github.event.inputs.create_release == '' || github.event_name == 'schedule') &&
      (needs.build-windows-nightly.result == 'success' || needs.build-macos-nightly.result == 'success' || needs.build-linux-nightly.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download all nightly artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-nightly"
          merge-multiple: true
          path: ./nightly-artifacts

      - name: 🔧 Generate nightly info
        id: nightly-info
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NIGHTLY_VERSION="$CURRENT_VERSION-nightly.${{ github.run_number }}"
          NIGHTLY_TAG="nightly-$(date +%Y%m%d)-${{ github.run_number }}"
          
          echo "nightly-version=$NIGHTLY_VERSION" >> $GITHUB_OUTPUT
          echo "nightly-tag=$NIGHTLY_TAG" >> $GITHUB_OUTPUT
          
          # Generate changelog for nightly
          LAST_NIGHTLY=$(git tag -l "nightly-*" | sort -V | tail -1)
          
          if [ -z "$LAST_NIGHTLY" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          else
            COMMITS=$(git log ${LAST_NIGHTLY}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog with proper variable substitution
          cat > nightly_changelog_temp.md << EOF
          ## 🌙 OpenLoveImage Nightly Build

          **Version**: \`${NIGHTLY_VERSION}\`
          **Build Date**: $(date -u +'%Y-%m-%d %H:%M UTC')
          **Commit**: \`${{ github.sha }}\`
          **Commits since last nightly**: ${{ needs.check-changes.outputs.commit-count }}

          ### ⚠️ Nightly Build Warning
          This is an automated nightly build for testing purposes. It may contain:
          - Unstable features
          - Known bugs
          - Breaking changes
          - Incomplete functionality

          **Not recommended for production use!**

          ### 📝 Recent Changes
          ${COMMITS}

          ### 📦 Available Downloads
          - **Windows**: .msi installer and .exe portable
          - **macOS**: .dmg universal (Intel + Apple Silicon)
          - **Linux**: .AppImage portable and .deb package

          ### 🚀 Quick Install
          1. Download the appropriate file for your OS
          2. Install or run as usual
          3. Report issues on our GitHub Issues

          ---
          *This nightly build expires in 30 days and will be automatically deleted.*
          EOF
          
          # Use heredoc for multiline output without escaping issues
          {
            echo 'nightly-changelog<<EOF'
            cat nightly_changelog_temp.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          
          rm nightly_changelog_temp.md

      - name: 🏷️ Create Nightly Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.nightly-info.outputs.nightly-tag }}
          git push origin ${{ steps.nightly-info.outputs.nightly-tag }}

      - name: 🌙 Create Nightly Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.nightly-info.outputs.nightly-tag }}
          name: "🌙 Nightly Build ${{ steps.nightly-info.outputs.nightly-version }}"
          body: ${{ steps.nightly-info.outputs.nightly-changelog }}
          draft: false
          prerelease: true
          files: |
            nightly-artifacts/**/*
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧹 Cleanup old nightly releases
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const nightlyReleases = releases.data
              .filter(release => release.tag_name.startsWith('nightly-'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            const releasesToDelete = nightlyReleases.slice(5);
            
            for (const release of releasesToDelete) {
              console.log(`Deleting old nightly release: ${release.tag_name}`);
              
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
              
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
              } catch (error) {
                console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
              }
            }

      - name: 🎉 Nightly Build Complete
        run: |
          echo "🌙 Nightly build completed successfully!"
          echo "📦 Version: ${{ steps.nightly-info.outputs.nightly-version }}"
          echo "🏷️ Tag: ${{ steps.nightly-info.outputs.nightly-tag }}"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.nightly-info.outputs.nightly-tag }}" 